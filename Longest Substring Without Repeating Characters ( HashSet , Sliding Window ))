OPTIMIZED APPROACH : 
class Solution {
    public int lengthOfLongestSubstring(String s) {
     int maxLength=0,left=0,right=0;
     Set<Character> set=new HashSet<>();
     while(right<s.length())
     {
        char ch=s.charAt(right);
        if(!set.contains(ch))
        {
            set.add(ch);
            maxLength=Math.max(maxLength, right-left+1);
            right++;
        }
        else{
            set.remove(s.charAt(left));
            left++;
        }
     }
     return maxLength;   
    }
}

BRUTE-FORCE APPROACH : 
class Solution {
    public int lengthOfLongestSubstring(String s) {
       int maxLength=0;
       for(int i=0;i<s.length();i++)
       {
        Set<Character> set=new HashSet<>();
        for(int j=i;j<s.length();j++)
        {
            char ch=s.charAt(j);
            if(set.contains(ch)) break;
            set.add(ch);
            maxLength=Math.max(maxLength,j-i+1);
        }
       }
       return maxLength;
    }
}
