APPROACH : MERGE SORT 
class Solution {
    public ListNode sortList(ListNode head) {
        if(head==null || head.next==null) return head;
        ListNode mid=getMid(head);
        ListNode left=sortList(head);
        ListNode right=sortList(mid);
        return merge(left,right);
    }
    public ListNode getMid(ListNode head)
    {
        ListNode slow=head, fast=head, prev=null;
        while(fast!=null && fast.next!=null)
        {
            prev=slow;
            slow=slow.next;
            fast=fast.next.next;
        }
        if(prev!=null) prev.next=null;
        return slow;
    }
    public ListNode merge(ListNode head1, ListNode head2)
    {
        ListNode dummy=new ListNode(-1);
        dummy.next=head1;
        ListNode curr=dummy;
        while(head1!=null && head2!=null)
        {
            if(head1.val<head2.val)
            {
                curr.next=head1;
                head1=head1.next;
                curr=curr.next;
            }
            else{
                curr.next=head2;
                head2=head2.next;
                curr=curr.next;
            }
        }
        curr.next=(head1!=null)? head1 : head2;
        return dummy.next;
    }
}
