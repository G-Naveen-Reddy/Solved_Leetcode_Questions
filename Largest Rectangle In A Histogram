optimized approach  : time -  O() , space - O(N)
class Solution {
    public int largestRectangleArea(int[] heights) {
        Stack<Integer >st=new Stack<>();
        int maxArea=0, n=heights.length;
        for(int i=0;i<=n;i++)
        {
            int currHeight=(i==n)? 0 : heights[i];
            while(!st.isEmpty() && currHeight<heights[st.peek()])
            {
                int height=heights[st.pop()];
                int width=(st.isEmpty())? i : i-st.peek()-1;
                maxArea=Math.max(maxArea,height*width);
            }
            st.push(i);
        }
        return maxArea;
    }
}

Brute force approach :  time - O(N^2) and space - O(1)
class Solution {
    public int largestRectangleArea(int[] heights) {
        int maxArea=0, n=heights.length;
        for(int i=0;i<n;i++)
        {
            int minHeight=heights[i];
            for(int j=i;j<heights.length;j++)
            {
                minHeight=Math.min(minHeight, heights[j]);
                int width=j-i+1;
                maxArea=Math.max(maxArea,minHeight*width);
            }
        }
        return maxArea; 
    }
}
