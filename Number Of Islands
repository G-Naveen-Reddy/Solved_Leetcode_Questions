class Solution {
    public int numIslands(char[][] grid) {
        int m=grid.length, n=grid[0].length;
        boolean[][] visit=new boolean[m][n];
        int count=0;
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(visit[i][j]==false && grid[i][j]=='1')
                {
                    dfs(i,j,grid,visit);
                    count++;
                }
            }
        }
        return count;
    }
    public void dfs(int i, int j, char[][] grid, boolean[][] visit)
    {
        if(i<0 || i>=grid.length || j<0 || j>=grid[0].length || grid[i][j]=='0' || visit[i][j]) return;
         visit[i][j]=true;
        dfs(i-1,j,grid,visit);
        dfs(i+1,j,grid,visit);
        dfs(i,j-1,grid,visit);
        dfs(i,j+1,grid,visit);
    }
}
