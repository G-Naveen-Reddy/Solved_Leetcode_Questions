TIME COMPLEXITY : O (log N )

class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] result={-1,-1};
        if(nums.length==0||nums==null)
        {  
             return result;
        }
       result[0]=firstPosition(nums,target);
       result[1]=lastPosition(nums,target);
       return result;
    }
    public static int firstPosition(int nums[],int target)
    {
        int left=0,right=nums.length-1,start=-1;
        while(left<=right)
        {
            int mid=(left+right)/2;
            if(nums[mid]==target)
            {
               start=mid;
               right=mid-1;
            }
            else if(nums[mid]>target)
            {
                right=mid-1;
            }
            else{
                left=mid+1;
            }
        }
        return start;
    }
    public static int lastPosition(int nums[],int target)
    {
        int left=0,right=nums.length-1,end=-1;
        while(left<=right)
        {
            int mid=(left+right)/2;
            if(nums[mid]==target)
            {
               end=mid;
               left=mid+1;
            }
            else if(nums[mid]>target)
            {
                right=mid-1;
            }
            else{
                left=mid+1;
            }
        }
        return end;
    }
}
