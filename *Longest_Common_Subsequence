Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.

Approach 1: Tabulation

class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
      int m=text1.length(),n=text2.length();
      if(m<0 || n<0) return 0;   
      int dp[][]=new int[m+1][n+1];
      for(int i=m;i>0;i--)
      {
        for(int j=n;j>0;j--)
        {
            if(text1.charAt(i-1)==text2.charAt(j-1))
            {
                dp[i-1][j-1]=1+dp[i][j];
            }
            else{
                dp[i-1][j-1]=Math.max(dp[i-1][j], dp[i][j-1]);
            }
        }
      }
      return dp[0][0];
    }
}

Approach 2 : Recursion + Memoization
class Solution {
    public int lcs(int i,int j,StringBuilder a,StringBuilder b,int dp[][])
    {
        if(i<0 || j<0) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        if(a.charAt(i)==b.charAt(j)) return dp[i][j]=1+lcs(i-1,j-1,a,b,dp);
        else return dp[i][j]=Math.max(lcs(i-1,j,a,b,dp),lcs(i,j-1,a,b,dp));
    }
    public int longestCommonSubsequence(String text1, String text2) {
      StringBuilder a=new StringBuilder(text1);
      StringBuilder b=new StringBuilder(text2);
      int m=a.length(),n=b.length();
      int dp[][]=new int[m][n];
      for(int num[] : dp) 
         Arrays.fill(num,-1);
      return lcs(m-1,n-1,a,b,dp);   
    }
}
