Input: nums = [1,1,1,1,1], target = 3
Output: 5
Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.
-1 + 1 + 1 + 1 + 1 = 3
+1 - 1 + 1 + 1 + 1 = 3
+1 + 1 - 1 + 1 + 1 = 3
+1 + 1 + 1 - 1 + 1 = 3
+1 + 1 + 1 + 1 - 1 = 3

BEST APPROACH: O(n * (2 * sum + 1))
class Solution {
    public int ways(int i,int nums[],int res,int target,int dp[][],int sum)
    {
        if(i==nums.length)
        {
            if(res==target) return 1;
            else return 0;
        }
        if(dp[i][res+sum]!=-1) return dp[i][res+sum];
        int add=ways(i+1,nums,res+nums[i],target,dp,sum);
        int sub=ways(i+1,nums,res-nums[i],target,dp,sum);
        return dp[i][res+sum]=add+sub;
    }
    public int findTargetSumWays(int[] nums, int target) {
        int sum=0,n=nums.length;
        for(int ele : nums) sum+=ele;
        int dp[][]=new int[n][2*sum+1];
        for(int ele[]  : dp)
        {
            Arrays.fill(ele,-1);
        }
       return ways(0,nums,0,target,dp,sum);
    }
}
