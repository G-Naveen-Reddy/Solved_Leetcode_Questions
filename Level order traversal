Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).
OPTMIZED APPROACH
Input: root = [3,9,20,null,null,15,7]
Output: [[3],[9,20],[15,7]]
Example 2:

Input: root = [1]
Output: [[1]]
Example 3:

Input: root = []
Output: []
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result=new ArrayList<>();
        Queue<TreeNode> queue=new LinkedList<>();
        if(root==null) return result;
        queue.add(root);
        while(!queue.isEmpty())
        {
            int levelsize=queue.size();
            List<Integer> currentlevel=new ArrayList<>();
            for(int i=0;i<levelsize;i++)
            {
                TreeNode currentnode=queue.remove();
                currentlevel.add(currentnode.val);
                if(currentnode.left!=null) queue.add(currentnode.left);
                if(currentnode.right!=null) queue.add(currentnode.right);
            }
            result.add(currentlevel);
        }
        return result;
    }
}
in above methoad we add elements in the list
2nd method:
Printing the elements in level order,
public static void levelorder(Node root)
        {
            Queue<Node> q=new LinkedList<>();
            if(root!=null) q.add(root);
            while(q.size()>0)
            {
                Node front=q.remove();
                System.out.print(front.val+" ");
                if(front.left!=null) q.add(front.left);
                if(front.right!=null) q.add(front.right);
            }
        
